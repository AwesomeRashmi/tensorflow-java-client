// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: function.proto

package org.tensorflow.framework;

public interface FunctionDefOrBuilder extends
    // @@protoc_insertion_point(interface_extends:tensorflow.FunctionDef)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The definition of the function's name, arguments, return values,
   * attrs etc.
   * </pre>
   *
   * <code>optional .tensorflow.OpDef signature = 1;</code>
   */
  boolean hasSignature();
  /**
   * <pre>
   * The definition of the function's name, arguments, return values,
   * attrs etc.
   * </pre>
   *
   * <code>optional .tensorflow.OpDef signature = 1;</code>
   */
  org.tensorflow.framework.OpDef getSignature();
  /**
   * <pre>
   * The definition of the function's name, arguments, return values,
   * attrs etc.
   * </pre>
   *
   * <code>optional .tensorflow.OpDef signature = 1;</code>
   */
  org.tensorflow.framework.OpDefOrBuilder getSignatureOrBuilder();

  /**
   * <pre>
   * The body of the function.
   * </pre>
   *
   * <code>repeated .tensorflow.FunctionDef.Node node = 2;</code>
   */
  java.util.List<FunctionDef.Node>
      getNodeList();
  /**
   * <pre>
   * The body of the function.
   * </pre>
   *
   * <code>repeated .tensorflow.FunctionDef.Node node = 2;</code>
   */
  FunctionDef.Node getNode(int index);
  /**
   * <pre>
   * The body of the function.
   * </pre>
   *
   * <code>repeated .tensorflow.FunctionDef.Node node = 2;</code>
   */
  int getNodeCount();
  /**
   * <pre>
   * The body of the function.
   * </pre>
   *
   * <code>repeated .tensorflow.FunctionDef.Node node = 2;</code>
   */
  java.util.List<? extends FunctionDef.NodeOrBuilder>
      getNodeOrBuilderList();
  /**
   * <pre>
   * The body of the function.
   * </pre>
   *
   * <code>repeated .tensorflow.FunctionDef.Node node = 2;</code>
   */
  FunctionDef.NodeOrBuilder getNodeOrBuilder(
          int index);

  /**
   * <pre>
   * The body of the function.  Unlike the NodeDefs in a GraphDef, attrs
   * may have values of type `placeholder` and the `input` field uses
   * the "output" format above.
   * </pre>
   *
   * <code>repeated .tensorflow.NodeDef node_def = 3;</code>
   */
  java.util.List<org.tensorflow.framework.NodeDef> 
      getNodeDefList();
  /**
   * <pre>
   * The body of the function.  Unlike the NodeDefs in a GraphDef, attrs
   * may have values of type `placeholder` and the `input` field uses
   * the "output" format above.
   * </pre>
   *
   * <code>repeated .tensorflow.NodeDef node_def = 3;</code>
   */
  org.tensorflow.framework.NodeDef getNodeDef(int index);
  /**
   * <pre>
   * The body of the function.  Unlike the NodeDefs in a GraphDef, attrs
   * may have values of type `placeholder` and the `input` field uses
   * the "output" format above.
   * </pre>
   *
   * <code>repeated .tensorflow.NodeDef node_def = 3;</code>
   */
  int getNodeDefCount();
  /**
   * <pre>
   * The body of the function.  Unlike the NodeDefs in a GraphDef, attrs
   * may have values of type `placeholder` and the `input` field uses
   * the "output" format above.
   * </pre>
   *
   * <code>repeated .tensorflow.NodeDef node_def = 3;</code>
   */
  java.util.List<? extends org.tensorflow.framework.NodeDefOrBuilder> 
      getNodeDefOrBuilderList();
  /**
   * <pre>
   * The body of the function.  Unlike the NodeDefs in a GraphDef, attrs
   * may have values of type `placeholder` and the `input` field uses
   * the "output" format above.
   * </pre>
   *
   * <code>repeated .tensorflow.NodeDef node_def = 3;</code>
   */
  org.tensorflow.framework.NodeDefOrBuilder getNodeDefOrBuilder(
          int index);

  /**
   * <pre>
   * A mapping from the output arg names from `signature` to the
   * outputs from `node_def` that should be returned by the function.
   * </pre>
   *
   * <code>map&lt;string, string&gt; ret = 4;</code>
   */
  int getRetCount();
  /**
   * <pre>
   * A mapping from the output arg names from `signature` to the
   * outputs from `node_def` that should be returned by the function.
   * </pre>
   *
   * <code>map&lt;string, string&gt; ret = 4;</code>
   */
  boolean containsRet(
          String key);
  /**
   * Use {@link #getRetMap()} instead.
   */
  @Deprecated
  java.util.Map<String, String>
  getRet();
  /**
   * <pre>
   * A mapping from the output arg names from `signature` to the
   * outputs from `node_def` that should be returned by the function.
   * </pre>
   *
   * <code>map&lt;string, string&gt; ret = 4;</code>
   */
  java.util.Map<String, String>
  getRetMap();
  /**
   * <pre>
   * A mapping from the output arg names from `signature` to the
   * outputs from `node_def` that should be returned by the function.
   * </pre>
   *
   * <code>map&lt;string, string&gt; ret = 4;</code>
   */

  String getRetOrDefault(
          String key,
          String defaultValue);
  /**
   * <pre>
   * A mapping from the output arg names from `signature` to the
   * outputs from `node_def` that should be returned by the function.
   * </pre>
   *
   * <code>map&lt;string, string&gt; ret = 4;</code>
   */

  String getRetOrThrow(
          String key);
}
