// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prediction_service.proto

package tensorflow.serving;

public final class PredictionServiceOuterClass {
  private PredictionServiceOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * PredictionService provides access to machine-learned models loaded by
   * model_servers.
   * </pre>
   *
   * Protobuf service {@code tensorflow.serving.PredictionService}
   */
  public static abstract class PredictionService
      implements com.google.protobuf.Service {
    protected PredictionService() {}

    public interface Interface {
      /**
       * <pre>
       * Predict -- provides access to loaded TensorFlow model.
       * </pre>
       *
       * <code>rpc Predict(.tensorflow.serving.PredictRequest) returns (.tensorflow.serving.PredictResponse);</code>
       */
      public abstract void predict(
              com.google.protobuf.RpcController controller,
              Predict.PredictRequest request,
              com.google.protobuf.RpcCallback<Predict.PredictResponse> done);

    }

    public static com.google.protobuf.Service newReflectiveService(
        final Interface impl) {
      return new PredictionService() {
        @Override
        public  void predict(
            com.google.protobuf.RpcController controller,
            Predict.PredictRequest request,
            com.google.protobuf.RpcCallback<Predict.PredictResponse> done) {
          impl.predict(controller, request, done);
        }

      };
    }

    public static com.google.protobuf.BlockingService
        newReflectiveBlockingService(final BlockingInterface impl) {
      return new com.google.protobuf.BlockingService() {
        public final com.google.protobuf.Descriptors.ServiceDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }

        public final com.google.protobuf.Message callBlockingMethod(
            com.google.protobuf.Descriptors.MethodDescriptor method,
            com.google.protobuf.RpcController controller,
            com.google.protobuf.Message request)
            throws com.google.protobuf.ServiceException {
          if (method.getService() != getDescriptor()) {
            throw new IllegalArgumentException(
              "Service.callBlockingMethod() given method descriptor for " +
              "wrong service type.");
          }
          switch(method.getIndex()) {
            case 0:
              return impl.predict(controller, (Predict.PredictRequest)request);
            default:
              throw new AssertionError("Can't get here.");
          }
        }

        public final com.google.protobuf.Message
            getRequestPrototype(
            com.google.protobuf.Descriptors.MethodDescriptor method) {
          if (method.getService() != getDescriptor()) {
            throw new IllegalArgumentException(
              "Service.getRequestPrototype() given method " +
              "descriptor for wrong service type.");
          }
          switch(method.getIndex()) {
            case 0:
              return Predict.PredictRequest.getDefaultInstance();
            default:
              throw new AssertionError("Can't get here.");
          }
        }

        public final com.google.protobuf.Message
            getResponsePrototype(
            com.google.protobuf.Descriptors.MethodDescriptor method) {
          if (method.getService() != getDescriptor()) {
            throw new IllegalArgumentException(
              "Service.getResponsePrototype() given method " +
              "descriptor for wrong service type.");
          }
          switch(method.getIndex()) {
            case 0:
              return Predict.PredictResponse.getDefaultInstance();
            default:
              throw new AssertionError("Can't get here.");
          }
        }

      };
    }

    /**
     * <pre>
     * Predict -- provides access to loaded TensorFlow model.
     * </pre>
     *
     * <code>rpc Predict(.tensorflow.serving.PredictRequest) returns (.tensorflow.serving.PredictResponse);</code>
     */
    public abstract void predict(
        com.google.protobuf.RpcController controller,
        Predict.PredictRequest request,
        com.google.protobuf.RpcCallback<Predict.PredictResponse> done);

    public static final
        com.google.protobuf.Descriptors.ServiceDescriptor
        getDescriptor() {
      return PredictionServiceOuterClass.getDescriptor().getServices().get(0);
    }
    public final com.google.protobuf.Descriptors.ServiceDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }

    public final void callMethod(
        com.google.protobuf.Descriptors.MethodDescriptor method,
        com.google.protobuf.RpcController controller,
        com.google.protobuf.Message request,
        com.google.protobuf.RpcCallback<
          com.google.protobuf.Message> done) {
      if (method.getService() != getDescriptor()) {
        throw new IllegalArgumentException(
          "Service.callMethod() given method descriptor for wrong " +
          "service type.");
      }
      switch(method.getIndex()) {
        case 0:
          this.predict(controller, (Predict.PredictRequest)request,
            com.google.protobuf.RpcUtil.<Predict.PredictResponse>specializeCallback(
              done));
          return;
        default:
          throw new AssertionError("Can't get here.");
      }
    }

    public final com.google.protobuf.Message
        getRequestPrototype(
        com.google.protobuf.Descriptors.MethodDescriptor method) {
      if (method.getService() != getDescriptor()) {
        throw new IllegalArgumentException(
          "Service.getRequestPrototype() given method " +
          "descriptor for wrong service type.");
      }
      switch(method.getIndex()) {
        case 0:
          return Predict.PredictRequest.getDefaultInstance();
        default:
          throw new AssertionError("Can't get here.");
      }
    }

    public final com.google.protobuf.Message
        getResponsePrototype(
        com.google.protobuf.Descriptors.MethodDescriptor method) {
      if (method.getService() != getDescriptor()) {
        throw new IllegalArgumentException(
          "Service.getResponsePrototype() given method " +
          "descriptor for wrong service type.");
      }
      switch(method.getIndex()) {
        case 0:
          return Predict.PredictResponse.getDefaultInstance();
        default:
          throw new AssertionError("Can't get here.");
      }
    }

    public static Stub newStub(
        com.google.protobuf.RpcChannel channel) {
      return new Stub(channel);
    }

    public static final class Stub extends PredictionService implements Interface {
      private Stub(com.google.protobuf.RpcChannel channel) {
        this.channel = channel;
      }

      private final com.google.protobuf.RpcChannel channel;

      public com.google.protobuf.RpcChannel getChannel() {
        return channel;
      }

      public  void predict(
          com.google.protobuf.RpcController controller,
          Predict.PredictRequest request,
          com.google.protobuf.RpcCallback<Predict.PredictResponse> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(0),
          controller,
          request,
          Predict.PredictResponse.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            Predict.PredictResponse.class,
            Predict.PredictResponse.getDefaultInstance()));
      }
    }

    public static BlockingInterface newBlockingStub(
        com.google.protobuf.BlockingRpcChannel channel) {
      return new BlockingStub(channel);
    }

    public interface BlockingInterface {
      public Predict.PredictResponse predict(
              com.google.protobuf.RpcController controller,
              Predict.PredictRequest request)
          throws com.google.protobuf.ServiceException;
    }

    private static final class BlockingStub implements BlockingInterface {
      private BlockingStub(com.google.protobuf.BlockingRpcChannel channel) {
        this.channel = channel;
      }

      private final com.google.protobuf.BlockingRpcChannel channel;

      public Predict.PredictResponse predict(
          com.google.protobuf.RpcController controller,
          Predict.PredictRequest request)
          throws com.google.protobuf.ServiceException {
        return (Predict.PredictResponse) channel.callBlockingMethod(
          getDescriptor().getMethods().get(0),
          controller,
          request,
          Predict.PredictResponse.getDefaultInstance());
      }

    }

    // @@protoc_insertion_point(class_scope:tensorflow.serving.PredictionService)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n\030prediction_service.proto\022\022tensorflow.s" +
      "erving\032\rpredict.proto2g\n\021PredictionServi" +
      "ce\022R\n\007Predict\022\".tensorflow.serving.Predi" +
      "ctRequest\032#.tensorflow.serving.PredictRe" +
      "sponseB\006\210\001\001\370\001\001b\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          Predict.getDescriptor(),
        }, assigner);
    Predict.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
